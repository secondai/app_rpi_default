{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "078a6e76-f623-4ae7-8681-f672b2a23c8a",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = device_input_node:Qmf8392h3298h\n      // - capabilityNode: Object,\n      // - externalInputNode: Object,\n\n      // let dataNode = {\n      //   type: 'device_input_node:Qmf8392h3298h',\n      //   data: {\n      //     deviceNode: deviceNode,\n      //     inputNode: {\n      //       type: 'standard_device_action:Qm2398fhsnsf',\n      //       data: {\n      //         action: 'startup',\n      //         options: {}\n      //       }\n      //     }\n      //   }\n      // }\n      \n      const { exec } = universe.require('child_process');\n      \n      \n      // Load the \"Devices\" capability\n      \n      let cmdInputNode = INPUT.data.inputNode;\n\n      if(cmdInputNode.type != 'standard_device_action:Qm2398fhsnsf'){\n        console.log('Unexpected input schema for device input');\n        return reject('Unexpected input schema for device input');\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      \n      \n      // Acts similar to \"incoming_from_uni\" \n      // - handles all(?) requests to the device \n      //   - usually passes off to another function \n      \n      // Get settings for device \n      // - expecting consistent relative location \n      let thisNode = await universe.searchMemory({\n        filter: {\n          dataFilter: {\n            _id: SELF._id,\n          }\n        }\n      });\n      thisNode = thisNode[0];\n      let deviceNode = thisNode.parent.parent;\n      let settingsNode = universe.lodash.find(deviceNode.nodes,{type: 'settings:Qmf329ffhj9f823h'});\n      if(!settingsNode){\n        console.error('Missing settings for device', deviceNode.data.name);\n        return reject({});\n      }\n      \n      let deviceAddress = settingsNode.data.address;\n      \n      // const Sound = universe.require('node-aplay');\n      \n      // var say = universe.require('say');\n      \n      // Actions \n    \n      switch(inputAction){\n        case 'startup':\n          // check for existence of speaker, play a sound \n          console.log('Startup sound playing...');\n          // new Sound({\n          //   device: settingsNode.data.address,\n          // }).play('/usr/share/sounds/alsa/Front_Center.wav');\n          return resolve({\n            type: 'boolean:Qmdsfdlkj',\n            data: true\n          });\n          break;\n          \n        case 'action': \n        case 'input':\n          // got some type of input\n          // console.log('inputOpts:', JSON.stringify(inputOpts.action,null,2));\n          switch(inputOpts.action){\n            case 'playSound':\n            case 'play-wav':\n            case 'playWav':\n              // console.log('Play Wav');\n              // new Sound({\n              //   device: settingsNode.data.address,\n              // }).play('/usr/share/sounds/alsa/Front_Center.wav');\n              // console.log('Sound4 (DONE PLAYING)');\n              \n              // console.log('DIRNAME:', __dirname);\n              // let audioPath = '/usr/share/sounds/alsa/Front_Center.wav';\n              // console.log(JSON.stringify(inputOpts,null,2));\n              let audioPath = inputOpts.data.audioPath; // universe.staticFilePath + '/Hollow.wav';\n              console.log('audioPath', audioPath);\n              // try {\n              //   console.log('Please wait while packages are removed');\n              //   (async function(){\n              //     let removed = await universe.removePackage('git://github.com/nicholasareed/node-aplay.git');\n              //     if(removed){\n              //       console.log('Removed!');\n              //     } else {\n              //       console.log('Failed removal');\n              //     }\n              //   })()\n               \n              // }catch(err){\n              //   console.error('Failed removing package installation', err);\n              // }\n              \n              try {\n                var fs = universe.require('fs');\n                if (fs.existsSync(audioPath)) {\n                    // Do something\n                  let stats = fs.statSync(audioPath);\n                  const fileSizeInBytes = stats.size\n                  //Convert the file size to megabytes (optional)\n                  // const fileSizeInMegabytes = fileSizeInBytes / 1000000.0\n                  // console.log('.wav file EXISTS', fileSizeInBytes);\n                } else {\n                  console.error('.wav file does NOT exist');\n                  return reject({\n                    type: 'error:...',\n                    data: 'wav does not exist'\n                  });\n                }\n\n                // let Sound2 = universe.require('aplay-v1.5.0'); \n                // if(Sound2){\n                //   console.log('Attempting to play sound on:', settingsNode.data.address);\n                //   new Sound2({\n                //     device: settingsNode.data.address,\n                //   }).play(audioPath);\n                // } else {\n                //   console.error('Missing Sound2'); \n                // }\n                \n                exec(`aplay -D ${deviceAddress} ${audioPath}`, (err, stdout, stderr) => {\n                  if (err) {\n                    console.error(`exec error: ${err}`);\n                    return;\n                  }\n                \n                  console.log(`aplay devices: ${stdout}`);\n                });\n                \n                \n              }catch(err){\n                // marked doesn't exist yet \n                // - requires installation! \n                // - TODO: move to \"dependencies\" on code, install at runtime \n                console.error('Sound Error:', err);\n                \n                // try {\n                //   if(universe.checkPackage('git://github.com/nicholasareed/node-aplay.git#00c4264315bfa653bb813db6d2cc3b34d1942be0').errorInstalling){\n                //     console.log('FAILED installing package node-aplay!');\n                //   } else {\n                //     console.log('Please wait while packages are installed');\n                    \n                //     (async function(){\n                //       let installed = await universe.installPackage('git://github.com/nicholasareed/node-aplay.git#00c4264315bfa653bb813db6d2cc3b34d1942be0');\n                //       if(installed){\n                //         console.log('Installed!');\n                //       } else {\n                //         console.log('Failed installation');\n                //       }\n                //     })()\n                    \n                //   }\n                // }catch(err){\n                //   console.error('Failed checking package installation', err);\n                // }\n                \n                \n              }\n              \n              \n              // say.speak(next,settingsNode.data.address, undefined,120,function(err){\n              //   if(err){\n              //     // console.log('Got an error');\n              //     console.error('say error:', err);\n              //     return;\n              //   }\n              //   console.log('Say complete!');\n              // });\n              \n              return resolve({\n                type: 'boolean:Qmdsfljk',\n                data: true\n              });\n              \n            case 'say':\n              \n              // let execStr = `TMP=`mktemp`\n              // echo \"$string\" | text2wave > $TMP\n              // aplay -q $TMP\n              // rm $TMP`\n              let textToSay = 'testing testing testing hello hello hello';\n              \n              // TODO: use a prettier voice, polly or google or msft? \n              let execStr = `\n              TMP=$(mktemp)\n              echo ${JSON.stringify(textToSay)} | text2wave > $TMP\n              aplay -D ${settingsNode.data.address} $TMP\n              echo $TMP\n              `\n              // exec('aplay -D plughw:CARD=Device_1,DEV=0 /usr/share/sounds/alsa/Front_Center.wav', (err, stdout, stderr) => {\n              exec(execStr, (err, stdout, stderr) => {\n                if (err) {\n                  console.error(`exec error: ${err}`);\n                  return;\n                }\n                \n                console.log('\"say\" output:', stdout);\n              });\n              \n              return resolve({\n                type: 'boolean:Qmdsfljk',\n                data: true\n              });\n              \n              break;\n            \n            default:\n              console.log('Unhandled inputOpts.action type:', inputOpts.action);\n              break;\n              \n          }\n          return resolve({\n            type: 'boolean:Qmdsfdlkj',\n            data: true\n          });\n          break;\n          \n        default:\n          console.error('Invalid action type:', inputAction);\n          return reject({});\n      }\n        \n    }catch(err){\n      console.error('err managing device:', err);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}