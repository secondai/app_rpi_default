{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "078a6e76-f623-4ae7-8681-f672b2a23c8a",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = device_input_node:Qmf8392h3298h\n      // - capabilityNode: Object,\n      // - externalInputNode: Object,\n\n      // let dataNode = {\n      //   type: 'device_input_node:Qmf8392h3298h',\n      //   data: {\n      //     deviceNode: deviceNode,\n      //     inputNode: {\n      //       type: 'standard_device_action:Qm2398fhsnsf',\n      //       data: {\n      //         action: 'startup',\n      //         options: {}\n      //       }\n      //     }\n      //   }\n      // }\n      \n      // Load the \"Devices\" capability\n      \n      let cmdInputNode = INPUT.data.inputNode;\n\n      if(cmdInputNode.type != 'standard_device_action:Qm2398fhsnsf'){\n        console.log('Unexpected input schema for device input');\n        return reject('Unexpected input schema for device input');\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      \n      \n      // Acts similar to \"incoming_from_uni\" \n      // - handles all(?) requests to the device \n      //   - usually passes off to another function \n      \n      // Get settings for device \n      // - expecting consistent relative location \n      let thisNode = await universe.searchMemory({\n        filter: {\n          dataFilter: {\n            _id: SELF._id,\n          }\n        }\n      });\n      thisNode = thisNode[0];\n      let deviceNode = thisNode.parent.parent;\n      let settingsNode = universe.lodash.find(deviceNode.nodes,{type: 'settings:Qmf329ffhj9f823h'});\n      if(!settingsNode){\n        console.error('Missing settings for device', deviceNode.data.name);\n        return reject({});\n      }\n      \n      const Sound = universe.require('node-aplay');\n      \n      var say = universe.require('say');\n      \n      // Actions \n    \n      switch(inputAction){\n        case 'startup':\n          // check for existence of speaker, play a sound \n          console.log('Startup sound playing...');\n          new Sound({\n            device: settingsNode.data.address,\n          }).play('/usr/share/sounds/alsa/Front_Center.wav');\n          return resolve({\n            type: 'boolean:Qmdsfdlkj',\n            data: true\n          });\n          break;\n          \n        case 'input':\n          // got some type of input\n          console.log('inputOpts:', JSON.stringify(inputOpts.action,null,2));\n          switch(inputOpts.action){\n            case 'playSound':\n            case 'play-wav':\n            case 'playWav':\n              console.log('Play Wav');\n              new Sound({\n                device: settingsNode.data.address,\n              }).play('/usr/share/sounds/alsa/Front_Center.wav');\n              console.log('Sound4 (DONE PLAYING)');\n              \n              \n              // say.speak(next,settingsNode.data.address, undefined,120,function(err){\n              //   if(err){\n              //     // console.log('Got an error');\n              //     console.error('say error:', err);\n              //     return;\n              //   }\n              //   console.log('Say complete!');\n              // });\n              \n              return resolve({\n                type: 'boolean:Qmdsfljk',\n                data: true\n              });\n            \n            default:\n              console.log('Unhandled inputOpts.action type:', inputOpts.action);\n              break;\n              \n          }\n          return resolve({\n            type: 'boolean:Qmdsfdlkj',\n            data: true\n          });\n          break;\n          \n        default:\n          console.error('Invalid action type:', inputAction);\n          return reject({});\n      }\n        \n    }catch(err){\n      console.error('err managing device:', err);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}