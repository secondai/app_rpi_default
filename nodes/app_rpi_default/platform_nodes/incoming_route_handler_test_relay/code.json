{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      let nodes = [];\n      let nodeResponse;\n      \n      console.log('Running /test2');\n      \n      \n      let result = '';\n      try {\n          \n        result = 'test2';\n        \n        var SerialPort = universe.require('serialport');\n        var port = new SerialPort('/dev/ttyUSB0', {\n          baudRate: 9600\n        });\n        \n        \n        var relayNum = (process.argv[2] || '').toString();\n        var cmd = process.argv[3] || '';\n        \n        // 1: No LED (off, default)\n        // echo -n -e '\\xA0\\x01\\x00\\xA1' > /dev/ttyUSB0\n        \n        // 1: LED (on)\n        // echo -n -e '\\xA0\\x01\\x01\\xA2' > /dev/ttyUSB0\n        \n        // 2: No LED (off, default)\n        // echo -n -e '\\xA0\\x02\\x00\\xA2' > /dev/ttyUSB0\n        \n        // 2: LED (on)\n        // echo -n -e '\\xA0\\x02\\x01\\xA3' > /dev/ttyUSB0\n        \n        switch(relayNum){\n          case '1':\n            switch(cmd.toLowerCase()){\n              case 'on':\n                port.write(Buffer.from('A00101A2','hex'));\n                break;\n              case 'off':\n                port.write(Buffer.from('A00100A1','hex'));\n                break;\n              default:\n                console.log('\"on\" or \"off\" required');\n                break;\n            }\n            break;\n        \n          case '2':\n            switch(cmd.toLowerCase()){\n              case 'on':\n                port.write(Buffer.from('A00201A3','hex'));\n                break;\n              case 'off':\n                port.write(Buffer.from('A00200A2','hex'));\n                break;\n              default:\n                console.log('\"on\" or \"off\" required');\n                break;\n            }\n            break;\n        \n          default:\n            console.log('Missing relay number');\n            break;\n        }\n\n        \n      }catch(err){\n        console.error('failed check:', err);\n      }\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Testing</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n            \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n            <div class=\"container\">\n              <div class=\"content\">\n                <pre><code>${JSON.stringify(result,null,2)}</code></pre>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}