{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "63c8bfa5-289b-4d8b-b8f5-6e8908fd1ac2",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // INPUT: {\n      //   type: 'create_and_syndicate_data:Qmdsfkjsl..',\n      //   data: {\n      //     relayNum: 1,\n      //     enable: true\n      //   }\n      // }\n      \n      var SerialPort = universe.require('serialport');\n      var port = new SerialPort('/dev/ttyUSB0', {\n        baudRate: 9600\n      });\n      \n      \n      var relayNum = INPUT.data.relayNum.toString(); //(process.argv[2] || '').toString();\n      var cmd = INPUT.data.enable ? true : false; //process.argv[3] || '';\n      \n      // 1: No LED (off, default)\n      // echo -n -e '\\xA0\\x01\\x00\\xA1' > /dev/ttyUSB0\n      \n      // 1: LED (on)\n      // echo -n -e '\\xA0\\x01\\x01\\xA2' > /dev/ttyUSB0\n      \n      // 2: No LED (off, default)\n      // echo -n -e '\\xA0\\x02\\x00\\xA2' > /dev/ttyUSB0\n      \n      // 2: LED (on)\n      // echo -n -e '\\xA0\\x02\\x01\\xA3' > /dev/ttyUSB0\n      \n      switch(relayNum){\n        case '1':\n          switch(cmd.toLowerCase()){\n            case true: // on\n              port.write(Buffer.from('A00101A2','hex'));\n              break;\n            case false: // off\n              port.write(Buffer.from('A00100A1','hex'));\n              break;\n            default:\n              console.log('\"on\" or \"off\" required');\n              break;\n          }\n          break;\n      \n        case '2':\n          switch(cmd.toLowerCase()){\n            case true: // on\n              port.write(Buffer.from('A00201A3','hex'));\n              break;\n            case false: // off\n              port.write(Buffer.from('A00200A2','hex'));\n              break;\n            default:\n              console.log('\"on\" or \"off\" required');\n              break;\n          }\n          break;\n      \n        default:\n          console.log('Missing relay number');\n          break;\n      }\n      \n      \n      \n\n      return resolve({\n        type: 'boolean:...',\n        data: true\n      });\n      \n      \n      \n    }catch(err){\n      console.error('FAILED trigger_usb_relay',err);\n      \n      return resolve({\n        // savedNode\n        type: 'error:..',\n        data: {\n          msg: 'Failed trigger_usb_relay',\n          INPUT,\n          error: true,\n          err: err\n        }\n      });\n      // resolve({ERROR: true, err: err});\n    }\n    \n    \n  })\n})()"
  }
}