{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "18758d2d-4380-4475-b694-15290a223074",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = capability_input_node:0.0.1:local:29f8239a13h9\n      // - capabilityNode: Object,\n      // - externalInputNode: Object,\n      \n      // Load the \"Identify with Remote Second\" capability\n      // order_level:0.0.1:local:382hf273\n      \n      let cmdInputNode = INPUT.data.externalInputNode;\n      \n      if(cmdInputNode.type != 'standard_capability_action:0.0.1:local:298j291bs'){\n        console.log('Unexpected input schema');\n        return reject();\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      console.log('Loaded Capability: File');\n            \n      switch(inputAction){\n        case 'play-sound-for-event':\n          \n          // Load up the speaker device, play a sound \n          // - define sound based on event type \n          console.log('Speaker InputOpts:', JSON.stringify(inputOpts,null,2));\n          \n          let audioPath;\n          switch(inputOpts.data.event){\n            case 'ready':\n              audioPath = universe.staticFilePath + '/Hollow.wav';\n              break;\n            case 'processing':\n              audioPath = universe.staticFilePath + '/GentleRoll.wav';\n              break;\n            case 'error':\n              audioPath = universe.staticFilePath + '/JumpUp.wav';\n              break;\n              \n            default:\n              audioPath = universe.staticFilePath + '/Hollow.wav';\n              break;\n          }\n          \n          // speakerDeviceNode\n          let deviceNode = await universe.searchMemory({\n            filter: {\n              dataFilter: {\n                type: {\n                  $like: 'device:'\n                },\n                'data.name': 'usbspeaker'\n              }\n            }\n          });\n          deviceNode = deviceNode.length ? deviceNode[0]:null;\n          if(!deviceNode){\n            console.error('Missing speakerDeviceNode');\n            return reject({});\n          }\n        \n          let deviceName = deviceNode.data ? deviceNode.data.name:'unknown';\n          console.log('Setup Device:', deviceName);\n          let managerNode = universe.lodash.find(deviceNode.nodes,{type: 'device_manager:Qmdslfkj23ff'});\n          if(!managerNode){\n            console.error('Missing Manager for device', deviceNode._id);\n            return reject({type: 'error:...', data: 'Missing Manager for device'});\n          }\n          let codeNode = universe.lodash.find(managerNode.nodes,{type: 'code:0.0.1:local:32498h32f2'});\n          if(!codeNode){\n            console.error('Missing CodeNode for Managaer for device', deviceNode._id);\n            return reject({type: 'error:...', data: 'Missing codenode for manager for device'});\n          }\n        \n          // ok to simply run as device input? \n          let reqNode = {\n            type: 'incoming_device_input:Qmsdlfkj32j900',\n            data: {\n        \t\t\tdeviceId: deviceNode._id,\n        \t\t// \taction: 'say',\n        \t\t\taction: 'playSound',\n        \t\t\tdata: {\n        \t\t\t  audioPath\n        \t\t\t}\n            }\n      \t\t}\n      \t\t\n          let playResponse = await universe.runRequest(reqNode, true);\n          \n          return resolve({\n            type: 'boolean:Qmsfdlj',\n            data: true\n          });\n          break;\n        \n        default:\n          console.error('Invalid input for Speaker Capability', inputAction);\n          break;\n      }\n      \n        \n    }catch(err){\n      resolve({ERROR: true, err: err});\n    }\n    \n    \n  })\n})()"
  }
}