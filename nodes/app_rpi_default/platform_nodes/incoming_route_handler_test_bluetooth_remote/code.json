{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      let nodes = [];\n      let nodeResponse;\n      \n      console.log('Running /test');\n      \n      \n      let result = '';\n      try {\n          \n        var noble = universe.require('noble');\n  \n        noble.on('stateChange', function(state) {\n          if (state === 'poweredOn') {\n            //\n            // Once the BLE radio has been powered on, it is possible\n            // to begin scanning for services. Pass an empty array to\n            // scan for all services (uses more time and power).\n            //\n            console.log('scanning...');\n            noble.startScanning([], false);\n          }\n          else {\n            noble.stopScanning();\n          }\n        })\n  \n  \n        noble.on('discover', async (peripheral) => {\n          // we found a peripheral, stop scanning\n          noble.stopScanning();\n  \n          //\n          // The advertisment data contains a name, power level (if available),\n          // certain advertised service uuids, as well as manufacturer data,\n          // which could be formatted as an iBeacon.\n          //\n          console.log('found peripheral:', peripheral.advertisement);\n          //\n          // Once the peripheral has been discovered, then connect to it.\n          //\n          // peripheral.connect(async (err) => {\n          //   //\n          //   // Once the peripheral has been connected, then discover the\n          //   // services and characteristics of interest.\n          //   //\n          //   peripheral.discoverAllServicesAndCharacteristics(async (err, services, chars) => {\n          //     services.forEach(async (service) => {\n          //       //\n          //       // This must be the service we were looking for.\n          //       //\n          //       console.log('found service:', service.uuid);\n  \n          //       //\n          //       // So, discover its characteristics.\n          //       //\n          //       service.discoverCharacteristics([], async (err, characteristics) => {\n  \n          //         characteristics.forEach(async (characteristic) => {\n          //           //\n          //           // Loop through each characteristic and match them to the\n          //           // UUIDs that we know about.\n          //           //\n          //           console.log('found characteristic:', characteristic.uuid);\n  \n          //         })\n  \n          //         //\n          //         // Check to see if we found all of our characteristics.\n          //         //\n  \n          //       })\n          //     })\n          //   })\n          // })\n        })\n        \n      }catch(err){\n        console.error('failed check:', err);\n      }\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Testing</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n            \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n            <div class=\"container\">\n              <div class=\"content\">\n                <pre><code>${JSON.stringify(result,null,2)}</code></pre>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}