{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      let nodes = [];\n      let nodeResponse;\n      \n      console.log('Running /test');\n      \n      \n      let result = 'testing bluetooth';\n      try {\n          \n        const bluetooth = require('node-bluetooth');\n\n        // create bluetooth device instance\n        const device = new bluetooth.DeviceINQ();\n        \n        device.listPairedDevices(console.log);\n        \n        device\n        .on('finished',  console.log.bind(console, 'finished'))\n        .on('found', function found(address, name){\n          console.log('Found: ' + address + ' with name ' + name);\n                  \n          // // find serial port channel\n          // device.findSerialPortChannel(address, function(channel){\n          //   console.log('Found RFCOMM channel for serial port on %s: ', name, channel);\n        \n          //   // make bluetooth connect to remote device\n          //   bluetooth.connect(address, channel, function(err, connection){\n          //     if(err) return console.error(err);\n        \n          //     connection.delimiter = Buffer.from('\\n', 'utf8');\n          //     connection.on('data', (buffer) => {\n          //       console.log('received message:', buffer.toString());\n          //     });\n        \n          //     connection.write(new Buffer('Hello!', 'utf-8'), () => {\n          //       console.log('wrote');\n          //     });\n          //   });\n            \n          // });\n\n          \n        }).inquire();\n        \n        // // make bluetooth connect to remote device\n        // bluetooth.connect(address, channel, function(err, connection){\n        //   if(err) return console.error(err);\n         \n        //   connection.on('data', (buffer) => {\n        //     console.log('received message:', buffer.toString());\n        //   });\n         \n        //   connection.write(new Buffer('Hello!', 'utf-8'));\n        // });\n\n\n\n        // var noble = universe.require('noble');\n  \n        // console.log('Current Noble State:', noble.state);\n        // if(noble.state == 'poweredOn'){\n        //   // start scanning immediately, if already powered on \n        //   noble.startScanning(); //[], false);\n        // } else {\n        //   noble.on('stateChange', function stateChange(state) {\n        //     console.log('----Bluetooth stateChange', state);\n        //     noble.removeListener('stateChange', stateChange);\n        //     if (state === 'poweredOn') {\n        //       //\n        //       // Once the BLE radio has been powered on, it is possible\n        //       // to begin scanning for services. Pass an empty array to\n        //       // scan for all services (uses more time and power).\n        //       //\n        //       console.log('Bluetooth Powered On2: scanning...');\n        //       noble.startScanning(); //[], false);\n        //     }\n        //     else {\n        //       console.log('Bluetooth Stopped Scanning. State:', state);\n        //       noble.stopScanning();\n        //     }\n        //   })\n        // }\n        \n  \n        // async function onDiscover (peripheral){\n        //   // we found a peripheral, stop scanning\n        //   // noble.stopScanning();\n  \n        //   //\n        //   // The advertisment data contains a name, power level (if available),\n        //   // certain advertised service uuids, as well as manufacturer data,\n        //   // which could be formatted as an iBeacon.\n        //   //\n        //   // console.log('--Found peripheral:', peripheral.id); //advertisement.serviceData);\n               \n        //   // Once the peripheral has been discovered, then connect to it.\n          \n        //   console.log('--PERIPHERAL discovered: ' + peripheral.id, peripheral.address, peripheral.addressType); \n        //   // peripheral.disconnect();\n        //   // peripheral.connect(function(error) {\n        //   //   console.log('connected to peripheral: ' + peripheral.uuid);\n        //   //   if(error){\n        //   //     console.error('e1', eror);\n        //   //     peripheral.disconnect();\n        //   //     return;\n        //   //   }\n        //   //   peripheral.discoverServices(['180a'], function(error, services) {\n              \n        //   //     if(error){\n        //   //       console.error('e2', eror);\n        //   //       return;\n        //   //     }\n              \n        //   //     var deviceInformationService = services[0];\n        //   //     console.log('deviceInformationService');\n        //   //     peripheral.disconnect();\n        //   //   });\n        //   // });\n          \n        //   // +\n        //   //             ' with address <' + peripheral.address +  ', ' + peripheral.addressType + '>,' +\n        //   //             ' connectable ' + peripheral.connectable + ',' +\n        //   //             ' RSSI ' + peripheral.rssi + ':');\n        //   // console.log('\\thello my local name is:');\n        //   // console.log('\\t\\t' + peripheral.advertisement.localName);\n        //   // console.log('\\tcan I interest you in any of the following advertised services:');\n        //   // console.log('\\t\\t' + JSON.stringify(peripheral.advertisement.serviceUuids));\n        \n        //   // var serviceData = peripheral.advertisement.serviceData;\n        //   // if (serviceData && serviceData.length) {\n        //   //   console.log('\\there is my service data:');\n        //   //   for (var i in serviceData) {\n        //   //     console.log('\\t\\t' + JSON.stringify(serviceData[i].uuid) + ': ' + JSON.stringify(serviceData[i].data.toString('hex')));\n        //   //   }\n        //   // }\n        //   // if (peripheral.advertisement.manufacturerData) {\n        //   //   console.log('\\there is my manufacturer data:');\n        //   //   console.log('\\t\\t' + JSON.stringify(peripheral.advertisement.manufacturerData.toString('hex')));\n        //   // }\n        //   // if (peripheral.advertisement.txPowerLevel !== undefined) {\n        //   //   console.log('\\tmy TX power level is:');\n        //   //   console.log('\\t\\t' + peripheral.advertisement.txPowerLevel);\n        //   // }\n          \n        //   // peripheral.connect(async (err) => {\n        //   //   //\n        //   //   // Once the peripheral has been connected, then discover the\n        //   //   // services and characteristics of interest.\n        //   //   //\n        //   //   peripheral.discoverAllServicesAndCharacteristics(async (err, services, chars) => {\n        //   //     services.forEach(async (service) => {\n        //   //       //\n        //   //       // This must be the service we were looking for.\n        //   //       //\n        //   //       console.log('found service:', service.uuid);\n  \n        //   //       //\n        //   //       // So, discover its characteristics.\n        //   //       //\n        //   //       service.discoverCharacteristics([], async (err, characteristics) => {\n  \n        //   //         characteristics.forEach(async (characteristic) => {\n        //   //           //\n        //   //           // Loop through each characteristic and match them to the\n        //   //           // UUIDs that we know about.\n        //   //           //\n        //   //           console.log('found characteristic:', characteristic.uuid);\n  \n        //   //         })\n  \n        //   //         //\n        //   //         // Check to see if we found all of our characteristics.\n        //   //         //\n  \n        //   //       })\n        //   //     })\n        //   //   })\n            \n        //   //   // disconnect when done \n        //   //   peripheral.disconnect();\n            \n        //   // })\n        // }\n        // noble.on('discover', onDiscover)\n        \n        \n        // universe.setTimeout(function(){\n        //   console.log('--Stopping Bluetooth Scanning--');\n        //   noble.stopScanning();\n        //   noble.removeListener('discover', onDiscover);\n        // },60 * 1000);\n        \n        \n      }catch(err){\n        console.error('failed check:', err);\n      }\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Testing</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n            \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n            <div class=\"container\">\n              <div class=\"content\">\n                <pre><code>${JSON.stringify(result,null,2)}</code></pre>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}