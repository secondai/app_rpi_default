{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      let nodes = [];\n      let nodeResponse;\n      \n      console.log('Running /test');\n      \n      \n      let result = '';\n      try {\n          \n          // register RPi against remote second\n          // - using passphrase\n          \n          // Create the ExternalIdentityNode that we'll use for connecting \n          // - contains connection_method (http) \n          let ExternalIdentityNode = {\n            \"type\": \"external_identity:0.0.1:local:8982f982j92\",\n            \"data\": {\n              \"identity\": \"idtest:nick\",\n              \"publicKey\": \"-----BEGIN PUBLIC KEY-----\\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKWpTFk12zASec/jC6q9npQ8Tslu1yIo\\nJMdQeC5o8G180biWx4BgGfebU0ljjXFa4dB+GWY5iGV1zk8xIbSpdNECAwEAAQ==\\n-----END PUBLIC KEY-----\"\n            },\n            \"nodes\": [\n              {\n                \"type\": \"external_identity_connect_method:0.0.1:local:382989239hsdfmn\",\n                \"data\": {\n                  \"method\": \"http\",\n                  \"connection\": \"https://second45.herokuapp.com/ai\"\n                }\n              }\n            ]\n          }\n          \n          ExternalIdentityNode = await universe.loadAndRunCapability('Identity',{},{\n            type: 'standard_capability_action:0.0.1:local:298j291bs',\n            data: {\n              action: 'saveExternal',\n              options: {\n                ExternalIdentityNode\n              }\n            }\n          });\n          \n          console.log('--TEST--');\n          console.log('--created saveExternal node');\n      \n          // Run the entire authentication handshake with the pre-existing ExternalIdentity Node \n          // - creates external_identity on remote \n          // - updates external_identity locally, to include \"token\" (encrypted {} on remote) \n          let authExternalIdentityNode2 = await universe.loadAndRunCapability('IdentifyInitiate',{},{\n            type: 'standard_capability_action:0.0.1:local:298j291bs',\n            data: {\n              action: 'start',\n              options: {\n                externalIdentityPublicKey: ExternalIdentityNode.data.publicKey,\n                // authToken: 'eeaac41bdb1b717d137a53779db97457:07e0fbe19e72c3ff7e329fc293bcf5b51d780c4c3c60f80403b2fea8f30d0daa5e4891dbdd6c57d9844622078a681853f31202d0632f0ee95031c9369a60708ddb6220e248e3c2ec6b3bb3c00eb2425aea922351d7128ef333ea5fe6a8ad139c1978759e29b057db1e655f2fe7c8962e' // \"learn\" \n              }\n            }\n          });\n          \n          if(authExternalIdentityNode2.type != 'challenge_finish:0.0.1:local:2983jf982'){\n            console.error('Failed IdentifyInitiate', authExternalIdentityNode2);\n            await universe.httpResponse('send', 'Failed IdentifyInitiate');\n            return false;\n          }\n          \n          \n          // console.log('--TEST--');\n          // console.log('--finished auth!');\n          // console.log('ExternalIdentityNode', ExternalIdentityNode);\n          \n          result = 'success setup, FAILED websocket';\n          \n          console.log('initial setup complete, now initLink');\n          \n          // Must re-get ExternalIdentityNode! \n          // - not upated by reference when modified in Capability.IdentifyInitiate\n          let ExternalIdentityNodes = await universe.searchMemory({\n            filter: {\n              dataFilter: {\n                'data.identity': 'idtest:nick'\n              }\n            }\n          });\n          ExternalIdentityNode = ExternalIdentityNodes[0];\n          \n          // setup websocket connection \n          // - capability: setupWebsocket\n          console.log('ExternalIdentityNode Data', ExternalIdentityNode.data);\n          let doneWebsockets = await universe.loadAndRunCapability('Websockets',{},{\n            type: 'standard_capability_action:0.0.1:local:298j291bs',\n            data: {\n              action: 'initLink',\n              options: {\n                ExternalIdentityNode //: this.props.state.OwnerSecondExternalIdentityNode\n              }\n            }\n          });\n          \n          console.log('Done with websocket initLink');\n          \n          result = 'success websocket';\n        \n      }catch(err){\n        console.error('failed check:', err);\n      }\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Testing</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n            \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n            <div class=\"container\">\n              <div class=\"content\">\n                <pre><code>${JSON.stringify(result,null,2)}</code></pre>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}