{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "078a6e76-f623-4ae7-8681-f672b2a23c8a",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Acts similar to \"incoming_from_uni\" \n      // - handles all(?) requests to the device \n      //   - usually passes off to another function \n      \n      // Get settings for device \n      // - device.settings node \n      let deviceSettings = {\n        type: '',\n        data: {\n          address: ''\n        }\n      };\n      \n      // Commonly used variables \n    \n      // Use a shared, persistent instance of noble \n      var noble = universe.globalCache.noble;\n      universe.globalCache.peripheral = universe.globalCache.peripheral || {};\n      \n      function StateChange(state) {\n        if (state === 'poweredOn') {\n          //\n          // Once the BLE radio has been powered on, it is possible\n          // to begin scanning for services. Pass an empty array to\n          // scan for all services (uses more time and power).\n          //\n          console.log('State Changed, starting scanning...');\n          noble.startScanning([], false);\n          universe.setTimeout(()=>{\n            console.log('Stop scan after 10 seconds');\n            noble.stopScanning();\n          },10 * 1000);\n        }\n        else {\n          noble.stopScanning();\n        }\n      }\n      \n      function connectToPeripheral(peripheral){\n        return new Promise((resolve,reject)=>{\n          peripheral.connect(err=>{\n            if(err){\n              console.error(err);\n              reject(err);\n            } else {\n              resolve();\n            }\n          })\n        })\n      }\n      \n      function discoverInfo(peripheral){\n        return new Promise((resolve,reject)=>{\n           peripheral.discoverAllServicesAndCharacteristics((err, services, characteristics) => {\n            if(err){\n              console.error(err);\n              return reject(err);\n            }\n            resolve({\n              services,\n              characteristics\n            });\n          })\n        })\n      }\n      \n      async function Discover(peripheral) {\n        // we found a peripheral, stop scanning\n        // noble.stopScanning();\n        \n        let prefId = peripheral.address; // mac address, \"unique\" to device\n        \n        //\n        // The advertisment data contains a name, power level (if available),\n        // certain advertised service uuids, as well as manufacturer data,\n        // which could be formatted as an iBeacon.\n        //\n        // console.log('found peripheral:', peripheral.advertisement, 'KEYS:', Object.keys(peripheral.advertisement), 'Keys2:', Object.keys(peripheral));\n        \n        // FF:FF:10:14:18:BD\n        \n        console.log('found peripheral:', peripheral.address, peripheral.addressType);\n        \n        if(!universe.globalCache.peripheral[prefId]){\n          universe.globalCache.peripheral[prefId] = { \n            device: peripheral,\n            status: 'disconnected',\n            services: [],\n            characteristics: [],\n            subscriptions: {} // added for subscriptions \n          }; // would work better as a Node \n        }\n        \n        let prefObj = universe.globalCache.peripheral[prefId];\n        \n        peripheral.once('connect',()=>{\n          prefObj.status = 'connected'\n        })\n        peripheral.once('disconnect',()=>{\n          console.log('Disconnected peripheral');\n          prefObj.status = 'disconnected'\n        })\n        \n        let matches = ['FF:FF:10:14:18:BD'];\n      \n        if(matches.indexOf(peripheral.address.toString().toUpperCase()) === -1){\n          // not a match\n          return;\n        }\n        \n        console.log('FOUND iTag!', peripheral.address);\n        \n        let wasConnected = false;\n        \n        if(prefObj.status != 'connected'){\n          console.log('Connecting...');\n          await connectToPeripheral(peripheral);\n        } else {\n          console.log('Already connected');\n          wasConnected = true;\n        }\n        \n        if(!wasConnected){\n          console.log('(Re)Discovering Info');\n          let servicesAndChars = await discoverInfo(peripheral);\n          prefObj.services = servicesAndChars.services;\n          prefObj.characteristics = servicesAndChars.characteristics;\n        }\n        \n        // console.log('ServicesAndChars:', JSON.stringify(servicesAndChars.services,null,2));\n        for(let service of prefObj.services){\n          console.log('iTagService:', service.name, service.type, service.uuid);\n        }\n        \n        let notifyChar;\n        for(let characteristic of prefObj.characteristics){\n          console.log('iTagCharacteristic:', characteristic.name, characteristic.type, characteristic.uuid, characteristic.properties );\n          \n          if(characteristic.uuid == 'ffe1'){\n            notifyChar = characteristic;\n          }\n        }\n        \n        if(notifyChar){\n          \n          if(wasConnected){\n            console.log('Not re-subscribing, already connected and subscribed'); \n          } else {\n            console.log('Subscribing to characteristic');\n          \n            notifyChar.on('data', function(data, isNotification) {\n              console.log('Got Data!', data, isNotification);\n            });\n    \n            // to enable notify\n            notifyChar.subscribe(function(err) {\n              console.log('Starting subscribe for ble button', err);\n            });\n          }\n          \n        } else {\n          console.error('Missing Notification Characteristic expected');\n        }\n        \n        // if(!wasConnected){\n          console.log('Disconnecting after X seconds');\n          universe.setTimeout(()=>{\n            peripheral.disconnect();\n            // prefObj.status = 'disconnected'\n            // clear subscriptions \n            // - necessary to re-subscribe on re-connect?\n            //   - might happen automatically? \n            // for(prefObj.subscriptions\n          },60 * 1000);\n        // } else {\n        //   // console.log('Disconnecting...');\n        //   // peripheral.disconnect();\n        //   // prefObj.status = 'disconnected';\n        // }\n       \n      \n      }\n      \n      if(!noble){\n        // setup noble \n        // - assign to Shared, Persistent modules cache \n        noble = universe.require('noble');\n        universe.globalCache.noble = noble;\n        \n      }\n      \n      if(noble._StateChange){      \n        noble.removeListener('stateChange', noble._StateChange);\n        noble.removeListener('discover', noble._Discover);\n      }\n      \n      noble._StateChange = StateChange;\n      noble._Discover = Discover;\n    \n      noble.on('stateChange', noble._StateChange)\n      noble.on('discover', noble._Discover)\n      \n      noble.stopScanning();\n      \n      if(noble.state == 'poweredOn'){\n        console.log('Already Powered on!');\n        noble.startScanning([], false);\n        universe.setTimeout(()=>{\n          console.log('Stop scan after 10 seconds');\n          noble.stopScanning();\n        },10 * 1000);\n      }\n      \n      switch(INPUT){\n        case 'startup':\n          // connect to the device, subscribe to button presses\n          \n          \n          \n          break;\n          \n          \n        case 'disconnect':\n          // disconnect\n          break\n          \n        case 'destroy':\n          // remove everything related\n          break\n          \n        default:\n          reject('Missing 3289fh23');\n          return;\n      }\n      \n      \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}